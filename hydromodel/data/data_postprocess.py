import os
import numpy as np
import pandas as pd
import pathlib
import spotpy
from pathlib import Path
import sys

sys.path.append(os.path.dirname(Path(os.path.abspath(__file__)).parent.parent))
import definitions
from hydromodel.utils import hydro_utils
from hydromodel.models.model_config import MODEL_PARAM_DICT


def mm_per_day_to_m3_per_sec(basin_area, q):
    """
    trans mm/day to m3/s for xaj models

    Parameters
    ----------
    basin_area
        we need to know the area of a basin so that we can perform this transformation
    q
        original streamflow data

    Returns
    -------

    """
    # 1 ft3 = 0.02831685 m3
    # ft3tom3 = 2.831685e-2
    # 1 km2 = 10^6 m2
    km2tom2 = 1e6
    # 1 m = 1000 mm
    mtomm = 1000
    # 1 day = 24 * 3600 s
    daytos = 24 * 3600
    q_trans = q * basin_area * km2tom2 / (mtomm * daytos)
    return q_trans


def save_sceua_calibrated_params(basin_id, save_dir, sceua_calibrated_file_name):
    """

    Parameters
    ----------
    basin_id
        id of a basin
    save_dir
        the directory where we save params
    sceua_calibrated_file_name
        the parameters' file generated by spotpy SCE-UA when finishing calibration

    Returns
    -------

    """
    results = spotpy.analyser.load_csv_results(sceua_calibrated_file_name)
    bestindex, bestobjf = spotpy.analyser.get_minlikeindex(results)
    best_model_run = results[bestindex]
    fields = [word for word in best_model_run.dtype.names if word.startswith("par")]
    best_calibrate_params = pd.DataFrame(list(best_model_run[fields]))
    save_file = os.path.join(save_dir, basin_id + "_calibrate_params.txt")
    best_calibrate_params.to_csv(save_file, sep=",", index=False, header=True)
    return np.array(best_calibrate_params).reshape(1, -1)


def summarize_parameters(result_dir, model_name):
    """
    output parameters of all basins to one file

    Parameters
    ----------
    result_dir
        the directory where we save results
    model_name
        the name of the model

    Returns
    -------

    """
    path = pathlib.Path(result_dir)
    all_basins_dirs = [file for file in path.iterdir() if file.is_dir()]
    params = []
    basin_ids = []
    for basin_dir in all_basins_dirs:
        basin_id = basin_dir.stem
        columns = MODEL_PARAM_DICT[model_name]["param_name"]
        params_txt = pd.read_csv(
            os.path.join(basin_dir, basin_id + "_calibrate_params.txt")
        )
        params_df = pd.DataFrame(params_txt.values.T, columns=columns)
        params.append(params_df)
        basin_ids.append(basin_id)
    params_dfs = pd.concat(params, axis=0)
    params_dfs.index = basin_ids
    print(params_dfs)
    params_dfs_ = params_dfs.transpose()
    params_npy_file = os.path.join(result_dir, "basins_params.npy")
    hydro_utils.serialize_numpy(params_dfs_, params_npy_file)
    data = hydro_utils.unserialize_numpy(params_npy_file)
    np.testing.assert_array_equal(data, params_dfs_)


def renormalize_params(result_dir, model_name):
    path = pathlib.Path(result_dir)
    all_basins_files = [file for file in path.iterdir() if file.is_dir()]
    renormalization_params = []
    for basin_dir in all_basins_files:
        basin_id = basin_dir.stem
        params = np.loadtxt(
            os.path.join(basin_dir, basin_id + "_calibrate_params.txt")
        )[1:].reshape(1, -1)
        param_ranges = MODEL_PARAM_DICT[model_name]["param_range"]
        xaj_params = [
            (value[1] - value[0]) * params[:, i] + value[0]
            for i, (key, value) in enumerate(param_ranges.items())
        ]
        xaj_params_ = np.array([x for j in xaj_params for x in j])
        params_df = pd.DataFrame(xaj_params_.T)
        renormalization_params.append(params_df)
    renormalization_params_dfs = pd.concat(renormalization_params, axis=1)
    print(renormalization_params_dfs)
    params_npy_file = os.path.join(result_dir, "basins_renormalization_params.npy")
    hydro_utils.serialize_numpy(renormalization_params_dfs, params_npy_file)
    data = hydro_utils.unserialize_numpy(params_npy_file)
    np.testing.assert_array_equal(data, renormalization_params_dfs)


def summarize_metrics(result_dir):
    """
    output all results' metrics of all basins to one file

    Parameters
    ----------
    result_dir
        the directory where we save results

    Returns
    -------

    """
    path = pathlib.Path(result_dir)
    all_basins_files = [file for file in path.iterdir() if file.is_dir()]
    train_metrics = {}
    test_metrics = {}
    count = 0
    basin_ids = []
    for basin_dir in all_basins_files:
        basin_id = basin_dir.stem
        basin_ids.append(basin_id)
        train_metric_file = os.path.join(basin_dir, "train_metrics.json")
        test_metric_file = os.path.join(basin_dir, "test_metrics.json")
        train_metric = hydro_utils.unserialize_json(train_metric_file)
        test_metric = hydro_utils.unserialize_json(test_metric_file)

        for key, value in train_metric.items():
            if count == 0:
                train_metrics[key] = value
            else:
                train_metrics[key] = train_metrics[key] + value
        for key, value in test_metric.items():
            if count == 0:
                test_metrics[key] = value
            else:
                test_metrics[key] = test_metrics[key] + value
        count = count + 1
    metric_dfs = pd.DataFrame(train_metrics, index=basin_ids)
    metric_dfs_ = metric_dfs.transpose()
    index_npy_file = os.path.join(result_dir, "basins_metrics.npy")
    hydro_utils.serialize_numpy(metric_dfs_, index_npy_file)
    data = hydro_utils.unserialize_numpy(index_npy_file)
    np.testing.assert_array_equal(data, metric_dfs_)


def save_streamflow_to_npy_file(result_dir, model_name):
    path = pathlib.Path(result_dir)
    all_basins_files = [file for file in path.iterdir() if file.is_dir()]
    streamflow = []
    basin_ids = []
    for basin_dir in all_basins_files:
        basin_id = basin_dir.stem
        basin_ids.append(basin_id)
        streamflow_df = pd.read_csv(
            os.path.join(
                basin_dir, "test_qsim_" + model_name + "_" + basin_id + ".csv"
            ),
            header=None,
        )
        streamflow.append(streamflow_df)
    streamflow_dfs = pd.concat(streamflow, axis=1)[1:]
    streamflow_dfs.columns = basin_ids
    print(streamflow_dfs)
    eva_npy_file = os.path.join(result_dir, "basin_qsim.npy")
    hydro_utils.serialize_numpy(streamflow_dfs, eva_npy_file)
    data = hydro_utils.unserialize_numpy(eva_npy_file)
    np.testing.assert_array_equal(data, streamflow_dfs)


if __name__ == "__main__":
    one_model_one_hyperparam_setting_dir = os.path.join(
        definitions.ROOT_DIR,
        "hydromodel",
        "example",
        "exp001",
        "xaj_mz_hyperparam_SCE_UA_rep1000_ngs1000",
    )
    # summarize_parameters(one_model_one_hyperparam_setting_dir, "xaj_mz")
    # renormalize_params(one_model_one_hyperparam_setting_dir, "xaj_mz")
    # summarize_metrics(one_model_one_hyperparam_setting_dir)
    save_streamflow_to_npy_file(one_model_one_hyperparam_setting_dir, "xaj_mz")
